Estrella3D::Estrella3D(GLdouble re, GLdouble np, GLdouble h)
{
	mMesh = Mesh::generaEstrella3D(re, np, h);
}

void Estrella3D::render(glm::dmat4 const& modelViewMat) const
{
	if (mMesh != nullptr) {
		dmat4 aMat = modelViewMat * mModelMat;  // glm matrix multiplication
		upload(aMat);
		glLineWidth(2);
		glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
		mMesh->render();
		glLineWidth(1);
		glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	}
}



Mesh* Mesh :: generaEstrella3D(GLdouble re, GLdouble np, GLdouble h)
{
	Mesh* mesh = new Mesh();

	mesh->mPrimitive = GL_TRIANGLE_FAN;
	mesh->mNumVertices = 2 * np + 2;
	mesh->vVertices.reserve(mesh->mNumVertices);

	mesh->vVertices.emplace_back(0.0, 0.0, h);

	GLdouble angle = radians(90.0);

	for (GLuint i = 0; i < mesh->mNumVertices - 1; i++)
	{		
		if (i % 2 == 0)mesh->vVertices.emplace_back(re * cos(angle), re * sin(angle), 0.0);
		else mesh->vVertices.emplace_back((re / 2) * cos(angle), (re / 2) * sin(angle), 0.0);
		
		angle += radians(180.0/np);
	}

	return mesh;
}





class Estrella3D : public Abs_Entity
{
public:
	explicit Estrella3D(GLdouble re, GLdouble np, GLdouble h);
	virtual void render(glm::dmat4 const& modelViewMat) const;
};


static Mesh* generaEstrella3D(GLdouble re, GLdouble np, GLdouble h);


Estrella3D* estrella3D = new Estrella3D(300, 1000, 100);
gObjects.push_back(estrella3D);